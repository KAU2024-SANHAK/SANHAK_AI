Index: database.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import json\nimport pymysql.cursors\nimport datetime\nfrom flask import Flask, request, jsonify\nfrom diaryclass import diary\n\n\napp = Flask(__name__)\n\nmysql_params = {\n    'host': 'kkoolbee-database.cvimcwwiengv.ap-northeast-2.rds.amazonaws.com',\n    'port': 3306,\n    'user': 'admin',\n    'password': 'sanhakkau11223344!!',\n    'database': 'kkooldanji',\n    'charset': 'utf8',\n    'cursorclass': pymysql.cursors.DictCursor\n}\n\nconn = pymysql.connect(**mysql_params)\n\n\n@app.route('/diary', methods=['GET'])\ndef get_api_diary_create():\n    data = request.json\n    token = request.headers.get('Authorization')\n\n    new_diary = diary(\n        diary_content = diary.diary_content(\n            feeling = data['feeling'],\n            when = data['when'],\n            where = data['where'],\n            who = data['who'],\n            what = data['what'],\n            realized = data['realized']\n        ),\n        metadata=None,\n        content=None,\n        title=None,\n        spicy_advice=None,\n        soft_advice=None\n    )\n\n    new_diary.get_diary_completion()\n    insert_diary_to_db(\"content\", new_diary.get_diary_data(\"content\"), token)\n    insert_diary_to_db(\"title\", new_diary.get_diary_data(\"title\"), token)\n\n    def find_diary_id():\n        try:\n            with conn.cursor() as cursor:\n                query = \"SELECT diary_id FROM diary WHERE member_id = %s AND title = %s\"\n                cursor.execute(query, )\n                result = cursor.fetchone()\n            return result\n        finally:\n            conn.close()\n            return 0\n\n    diary_id = find_diary_id()\n\n\n    return jsonify({\n        \"status\": 201,\n        \"message\": \"요청이 성공했습니다.\",\n        \"data\": {\n            \"diaryId\": diary_id,\n            \"diaryContent\" : new_diary.get_diary_data(\"content\")\n        }\n    }), 201\n\n\n@app.route('/api/ai/diary/feelings', methods=['POST'])\ndef get_diary_feelings():\n    data = request.json\n    token = request.headers.get('Authorization')\n    dairy_id = data['diaryId']\n\n    diary_content = get_data_from_db(\"content\", token, dairy_id)\n\n    new_diary = diary(\n        diary_content = None,\n        metadata=None,\n        content=diary_content,\n        title=None,\n        spicy_advice=None,\n        soft_advice=None\n    )\n\n    def insert_feeling_to_db(feeling):\n        try:\n            with conn.cursor() as cursor:\n                query = \"UPDATE diary SET feeling = %s WHERE member_id = %s AND diary_id = %s\"\n                cursor.execute(query, (feeling, token, dairy_id))\n            conn.commit()\n        finally:\n            conn.close()\n            return 0\n\n    new_diary.get_diary_feeling()\n    insert_feeling_to_db(new_diary.get_diary_data(\"feeling\"))\n\n\n    return jsonify({\n        \"status\": 201,\n        \"message\": \"요청이 성공했습니다.\",\n        \"data\": {\n            \"feeling1\": new_diary.get_diary_data(\"feeling\")[0],\n            \"feeling2\": new_diary.get_diary_data(\"feeling\")[1]\n        }\n    }), 201\n\n\n@app.route('/api/ai/advice/content', methods=['POST'])\ndef get_diary_davice():\n    data = request.json\n    token = request.headers.get('Authorization')\n    dairy_id = data['diaryId']\n\n    diary_content = get_data_from_db(\"content\", token, dairy_id)\n\n    new_diary = diary(\n        diary_content = None,\n        metadata=None,\n        content=diary_content,\n        title=None,\n        spicy_advice=None,\n        soft_advice=None\n    )\n\n    new_diary.get_diary_advice()\n\n    def insert_advice_to_db(kind, spicy):\n        try:\n            with conn.cursor() as cursor:\n                query = \"INSERT INTO advice (kind_advice, spicy_advice)\"\n                cursor.execute(query, (kind, spicy))\n            conn.commit()\n        finally:\n            conn.close()\n            return 0\n\n    insert_advice_to_db(new_diary.get_diary_data(\"soft_advice\"), new_diary.get_diary_data(\"spicy_advice\"))\n\n    try:\n        with conn.cursor() as cursor:\n            query = \"SELECT id FROM advice WHERE kind_advice = %s AND spicy_advice = %s\"\n            cursor.execute(query, (new_diary.get_diary_data(\"soft_advice\"), new_diary.get_diary_data(\"spicy_advice\")))\n            adviceId = cursor.fetchone()\n            query = \"UPDATE diary SET advice_id = %s WHERE member_id = %s AND diary_id = %s\"\n            cursor.execute(query, (adviceId, token, dairy_id))\n        conn.commit()\n    finally:\n        conn.close()\n\n    return jsonify({\n        \"status\": 201,\n        \"message\": \"요청이 성공했습니다.\",\n        \"data\": {\n            \"adviceId\": adviceId,\n            \"advice\": {\n                \"spicy\": new_diary.get_diary_data(\"spicy_advice\"),\n                \"kind\": new_diary.get_diary_data(\"soft_advice\")\n            }\n        }\n    }), 201\n\n\n\ndef get_data_from_db(what, member_id, diary_id):\n    try:\n        with conn.cursor() as cursor:\n            query = \"SELECT %s FROM diary WHERE member_id = %s AND diary_id = %s\"\n            cursor.execute(query, (what, member_id, diary_id))\n            result = cursor.fetchall()\n        return result\n    finally:\n        conn.close()\n\n\ndef insert_diary_to_db(where, values, member_id):\n    try:\n        with conn.cursor() as cursor:\n            query = \"UPDATE diary SET %s = %s WHERE member_id = %s\"\n            cursor.execute(query, (where, values, member_id))\n        conn.commit()\n    except Exception as e:\n        print(e)\n\n\n\nif __name__ == '__main__':\n    app.run()
===================================================================
diff --git a/database.py b/database.py
--- a/database.py	
+++ b/database.py	
@@ -111,7 +111,7 @@
 
 
 @app.route('/api/ai/advice/content', methods=['POST'])
-def get_diary_davice():
+def get_diary_advice():
     data = request.json
     token = request.headers.get('Authorization')
     dairy_id = data['diaryId']
@@ -187,6 +187,20 @@
         print(e)
 
 
+@app.route('/api/ai/diary/summary', methods=['GET'])
+def get_diary_summary():
+    token = request.headers.get('Authorization')
+
+    def get_diary_summary_from_db():
+        try:
+            with conn.cursor() as cursor:
+                query = "SELECT feeling FROM diary WHERE member_id = %s AND "
+                cursor.execute(query, token)
+                result = cursor.fetchall()
+            return result
+        finally:
+            conn.close()
+
 
 if __name__ == '__main__':
     app.run()
\ No newline at end of file
